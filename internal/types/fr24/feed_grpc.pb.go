// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: internal/fr24/feed.proto

package fr24

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Feed_Echo_FullMethodName              = "/fr24.feed.api.v1.Feed/Echo"
	Feed_CountDown_FullMethodName         = "/fr24.feed.api.v1.Feed/CountDown"
	Feed_LiveFeed_FullMethodName          = "/fr24.feed.api.v1.Feed/LiveFeed"
	Feed_Playback_FullMethodName          = "/fr24.feed.api.v1.Feed/Playback"
	Feed_NearestFlights_FullMethodName    = "/fr24.feed.api.v1.Feed/NearestFlights"
	Feed_LiveFlightsStatus_FullMethodName = "/fr24.feed.api.v1.Feed/LiveFlightsStatus"
	Feed_FetchSearchIndex_FullMethodName  = "/fr24.feed.api.v1.Feed/FetchSearchIndex"
	Feed_FollowFlight_FullMethodName      = "/fr24.feed.api.v1.Feed/FollowFlight"
)

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	Echo(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	CountDown(ctx context.Context, in *Duration, opts ...grpc.CallOption) (Feed_CountDownClient, error)
	LiveFeed(ctx context.Context, in *LiveFeedRequest, opts ...grpc.CallOption) (*LiveFeedResponse, error)
	Playback(ctx context.Context, in *PlaybackRequest, opts ...grpc.CallOption) (*PlaybackResponse, error)
	NearestFlights(ctx context.Context, in *NearestFlightsRequest, opts ...grpc.CallOption) (*NearestFlightsResponse, error)
	LiveFlightsStatus(ctx context.Context, in *LiveFlightsStatusRequest, opts ...grpc.CallOption) (*LiveFlightsStatusResponse, error)
	FetchSearchIndex(ctx context.Context, in *FetchSearchIndexRequest, opts ...grpc.CallOption) (*FetchSearchIndexResponse, error)
	FollowFlight(ctx context.Context, in *FollowFlightRequest, opts ...grpc.CallOption) (Feed_FollowFlightClient, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) Echo(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, Feed_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) CountDown(ctx context.Context, in *Duration, opts ...grpc.CallOption) (Feed_CountDownClient, error) {
	stream, err := c.cc.NewStream(ctx, &Feed_ServiceDesc.Streams[0], Feed_CountDown_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &feedCountDownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feed_CountDownClient interface {
	Recv() (*Tick, error)
	grpc.ClientStream
}

type feedCountDownClient struct {
	grpc.ClientStream
}

func (x *feedCountDownClient) Recv() (*Tick, error) {
	m := new(Tick)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *feedClient) LiveFeed(ctx context.Context, in *LiveFeedRequest, opts ...grpc.CallOption) (*LiveFeedResponse, error) {
	out := new(LiveFeedResponse)
	err := c.cc.Invoke(ctx, Feed_LiveFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) Playback(ctx context.Context, in *PlaybackRequest, opts ...grpc.CallOption) (*PlaybackResponse, error) {
	out := new(PlaybackResponse)
	err := c.cc.Invoke(ctx, Feed_Playback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) NearestFlights(ctx context.Context, in *NearestFlightsRequest, opts ...grpc.CallOption) (*NearestFlightsResponse, error) {
	out := new(NearestFlightsResponse)
	err := c.cc.Invoke(ctx, Feed_NearestFlights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) LiveFlightsStatus(ctx context.Context, in *LiveFlightsStatusRequest, opts ...grpc.CallOption) (*LiveFlightsStatusResponse, error) {
	out := new(LiveFlightsStatusResponse)
	err := c.cc.Invoke(ctx, Feed_LiveFlightsStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) FetchSearchIndex(ctx context.Context, in *FetchSearchIndexRequest, opts ...grpc.CallOption) (*FetchSearchIndexResponse, error) {
	out := new(FetchSearchIndexResponse)
	err := c.cc.Invoke(ctx, Feed_FetchSearchIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedClient) FollowFlight(ctx context.Context, in *FollowFlightRequest, opts ...grpc.CallOption) (Feed_FollowFlightClient, error) {
	stream, err := c.cc.NewStream(ctx, &Feed_ServiceDesc.Streams[1], Feed_FollowFlight_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &feedFollowFlightClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feed_FollowFlightClient interface {
	Recv() (*FollowFlightResponse, error)
	grpc.ClientStream
}

type feedFollowFlightClient struct {
	grpc.ClientStream
}

func (x *feedFollowFlightClient) Recv() (*FollowFlightResponse, error) {
	m := new(FollowFlightResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	Echo(context.Context, *Ping) (*Pong, error)
	CountDown(*Duration, Feed_CountDownServer) error
	LiveFeed(context.Context, *LiveFeedRequest) (*LiveFeedResponse, error)
	Playback(context.Context, *PlaybackRequest) (*PlaybackResponse, error)
	NearestFlights(context.Context, *NearestFlightsRequest) (*NearestFlightsResponse, error)
	LiveFlightsStatus(context.Context, *LiveFlightsStatusRequest) (*LiveFlightsStatusResponse, error)
	FetchSearchIndex(context.Context, *FetchSearchIndexRequest) (*FetchSearchIndexResponse, error)
	FollowFlight(*FollowFlightRequest, Feed_FollowFlightServer) error
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) Echo(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedFeedServer) CountDown(*Duration, Feed_CountDownServer) error {
	return status.Errorf(codes.Unimplemented, "method CountDown not implemented")
}
func (UnimplementedFeedServer) LiveFeed(context.Context, *LiveFeedRequest) (*LiveFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveFeed not implemented")
}
func (UnimplementedFeedServer) Playback(context.Context, *PlaybackRequest) (*PlaybackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Playback not implemented")
}
func (UnimplementedFeedServer) NearestFlights(context.Context, *NearestFlightsRequest) (*NearestFlightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NearestFlights not implemented")
}
func (UnimplementedFeedServer) LiveFlightsStatus(context.Context, *LiveFlightsStatusRequest) (*LiveFlightsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveFlightsStatus not implemented")
}
func (UnimplementedFeedServer) FetchSearchIndex(context.Context, *FetchSearchIndexRequest) (*FetchSearchIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSearchIndex not implemented")
}
func (UnimplementedFeedServer) FollowFlight(*FollowFlightRequest, Feed_FollowFlightServer) error {
	return status.Errorf(codes.Unimplemented, "method FollowFlight not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&Feed_ServiceDesc, srv)
}

func _Feed_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Echo(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_CountDown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Duration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServer).CountDown(m, &feedCountDownServer{stream})
}

type Feed_CountDownServer interface {
	Send(*Tick) error
	grpc.ServerStream
}

type feedCountDownServer struct {
	grpc.ServerStream
}

func (x *feedCountDownServer) Send(m *Tick) error {
	return x.ServerStream.SendMsg(m)
}

func _Feed_LiveFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).LiveFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_LiveFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).LiveFeed(ctx, req.(*LiveFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_Playback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaybackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).Playback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_Playback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).Playback(ctx, req.(*PlaybackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_NearestFlights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NearestFlightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).NearestFlights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_NearestFlights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).NearestFlights(ctx, req.(*NearestFlightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_LiveFlightsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveFlightsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).LiveFlightsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_LiveFlightsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).LiveFlightsStatus(ctx, req.(*LiveFlightsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_FetchSearchIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSearchIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServer).FetchSearchIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Feed_FetchSearchIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServer).FetchSearchIndex(ctx, req.(*FetchSearchIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feed_FollowFlight_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FollowFlightRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServer).FollowFlight(m, &feedFollowFlightServer{stream})
}

type Feed_FollowFlightServer interface {
	Send(*FollowFlightResponse) error
	grpc.ServerStream
}

type feedFollowFlightServer struct {
	grpc.ServerStream
}

func (x *feedFollowFlightServer) Send(m *FollowFlightResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Feed_ServiceDesc is the grpc.ServiceDesc for Feed service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feed_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fr24.feed.api.v1.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Feed_Echo_Handler,
		},
		{
			MethodName: "LiveFeed",
			Handler:    _Feed_LiveFeed_Handler,
		},
		{
			MethodName: "Playback",
			Handler:    _Feed_Playback_Handler,
		},
		{
			MethodName: "NearestFlights",
			Handler:    _Feed_NearestFlights_Handler,
		},
		{
			MethodName: "LiveFlightsStatus",
			Handler:    _Feed_LiveFlightsStatus_Handler,
		},
		{
			MethodName: "FetchSearchIndex",
			Handler:    _Feed_FetchSearchIndex_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CountDown",
			Handler:       _Feed_CountDown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FollowFlight",
			Handler:       _Feed_FollowFlight_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/fr24/feed.proto",
}
