// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: internal/fr24/feed.proto

package fr24

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RestrictionVisibility int32

const (
	RestrictionVisibility_NOT_VISIBLE       RestrictionVisibility = 0
	RestrictionVisibility_PARTIALLY_VISIBLE RestrictionVisibility = 1
	RestrictionVisibility_FULLY_VISIBLE     RestrictionVisibility = 2
)

// Enum value maps for RestrictionVisibility.
var (
	RestrictionVisibility_name = map[int32]string{
		0: "NOT_VISIBLE",
		1: "PARTIALLY_VISIBLE",
		2: "FULLY_VISIBLE",
	}
	RestrictionVisibility_value = map[string]int32{
		"NOT_VISIBLE":       0,
		"PARTIALLY_VISIBLE": 1,
		"FULLY_VISIBLE":     2,
	}
)

func (x RestrictionVisibility) Enum() *RestrictionVisibility {
	p := new(RestrictionVisibility)
	*p = x
	return p
}

func (x RestrictionVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestrictionVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[0].Descriptor()
}

func (RestrictionVisibility) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[0]
}

func (x RestrictionVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestrictionVisibility.Descriptor instead.
func (RestrictionVisibility) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{0}
}

type TrafficType int32

const (
	TrafficType_NONE          TrafficType = 0
	TrafficType_GROUND_ONLY   TrafficType = 1
	TrafficType_AIRBORNE_ONLY TrafficType = 2
	TrafficType_ALL           TrafficType = 3
)

// Enum value maps for TrafficType.
var (
	TrafficType_name = map[int32]string{
		0: "NONE",
		1: "GROUND_ONLY",
		2: "AIRBORNE_ONLY",
		3: "ALL",
	}
	TrafficType_value = map[string]int32{
		"NONE":          0,
		"GROUND_ONLY":   1,
		"AIRBORNE_ONLY": 2,
		"ALL":           3,
	}
)

func (x TrafficType) Enum() *TrafficType {
	p := new(TrafficType)
	*p = x
	return p
}

func (x TrafficType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[1].Descriptor()
}

func (TrafficType) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[1]
}

func (x TrafficType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficType.Descriptor instead.
func (TrafficType) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{1}
}

type DataSource int32

const (
	DataSource_ADSB              DataSource = 0
	DataSource_MLAT              DataSource = 1
	DataSource_FLARM             DataSource = 2
	DataSource_FAA               DataSource = 3
	DataSource_ESTIMATED         DataSource = 4
	DataSource_SATELLITE         DataSource = 5
	DataSource_OTHER_DATA_SOURCE DataSource = 6
	DataSource_UAT               DataSource = 7
	DataSource_SPIDERTRACKS      DataSource = 8
	DataSource_AUS               DataSource = 9
)

// Enum value maps for DataSource.
var (
	DataSource_name = map[int32]string{
		0: "ADSB",
		1: "MLAT",
		2: "FLARM",
		3: "FAA",
		4: "ESTIMATED",
		5: "SATELLITE",
		6: "OTHER_DATA_SOURCE",
		7: "UAT",
		8: "SPIDERTRACKS",
		9: "AUS",
	}
	DataSource_value = map[string]int32{
		"ADSB":              0,
		"MLAT":              1,
		"FLARM":             2,
		"FAA":               3,
		"ESTIMATED":         4,
		"SATELLITE":         5,
		"OTHER_DATA_SOURCE": 6,
		"UAT":               7,
		"SPIDERTRACKS":      8,
		"AUS":               9,
	}
)

func (x DataSource) Enum() *DataSource {
	p := new(DataSource)
	*p = x
	return p
}

func (x DataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[2].Descriptor()
}

func (DataSource) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[2]
}

func (x DataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource.Descriptor instead.
func (DataSource) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{2}
}

type Service int32

const (
	Service_PASSENGER               Service = 0
	Service_CARGO                   Service = 1
	Service_MILITARY_AND_GOVERNMENT Service = 2
	Service_BUSINESS_JETS           Service = 3
	Service_GENERAL_AVIATION        Service = 4
	Service_HELICOPTERS             Service = 5
	Service_LIGHTER_THAN_AIR        Service = 6
	Service_GLIDERS                 Service = 7
	Service_DRONES                  Service = 8
	Service_GROUND_VEHICLES         Service = 9
	Service_OTHER_SERVICE           Service = 10
	Service_NON_CATEGORIZED         Service = 11
)

// Enum value maps for Service.
var (
	Service_name = map[int32]string{
		0:  "PASSENGER",
		1:  "CARGO",
		2:  "MILITARY_AND_GOVERNMENT",
		3:  "BUSINESS_JETS",
		4:  "GENERAL_AVIATION",
		5:  "HELICOPTERS",
		6:  "LIGHTER_THAN_AIR",
		7:  "GLIDERS",
		8:  "DRONES",
		9:  "GROUND_VEHICLES",
		10: "OTHER_SERVICE",
		11: "NON_CATEGORIZED",
	}
	Service_value = map[string]int32{
		"PASSENGER":               0,
		"CARGO":                   1,
		"MILITARY_AND_GOVERNMENT": 2,
		"BUSINESS_JETS":           3,
		"GENERAL_AVIATION":        4,
		"HELICOPTERS":             5,
		"LIGHTER_THAN_AIR":        6,
		"GLIDERS":                 7,
		"DRONES":                  8,
		"GROUND_VEHICLES":         9,
		"OTHER_SERVICE":           10,
		"NON_CATEGORIZED":         11,
	}
)

func (x Service) Enum() *Service {
	p := new(Service)
	*p = x
	return p
}

func (x Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[3].Descriptor()
}

func (Service) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[3]
}

func (x Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service.Descriptor instead.
func (Service) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{3}
}

type AirportFilterType int32

const (
	AirportFilterType_BOTH     AirportFilterType = 0
	AirportFilterType_INBOUND  AirportFilterType = 1
	AirportFilterType_OUTBOUND AirportFilterType = 2
)

// Enum value maps for AirportFilterType.
var (
	AirportFilterType_name = map[int32]string{
		0: "BOTH",
		1: "INBOUND",
		2: "OUTBOUND",
	}
	AirportFilterType_value = map[string]int32{
		"BOTH":     0,
		"INBOUND":  1,
		"OUTBOUND": 2,
	}
)

func (x AirportFilterType) Enum() *AirportFilterType {
	p := new(AirportFilterType)
	*p = x
	return p
}

func (x AirportFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirportFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[4].Descriptor()
}

func (AirportFilterType) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[4]
}

func (x AirportFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirportFilterType.Descriptor instead.
func (AirportFilterType) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{4}
}

type AirlineFilterType int32

const (
	AirlineFilterType_PAINTED_AS  AirlineFilterType = 0
	AirlineFilterType_OPERATED_BY AirlineFilterType = 1
)

// Enum value maps for AirlineFilterType.
var (
	AirlineFilterType_name = map[int32]string{
		0: "PAINTED_AS",
		1: "OPERATED_BY",
	}
	AirlineFilterType_value = map[string]int32{
		"PAINTED_AS":  0,
		"OPERATED_BY": 1,
	}
)

func (x AirlineFilterType) Enum() *AirlineFilterType {
	p := new(AirlineFilterType)
	*p = x
	return p
}

func (x AirlineFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirlineFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[5].Descriptor()
}

func (AirlineFilterType) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[5]
}

func (x AirlineFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirlineFilterType.Descriptor instead.
func (AirlineFilterType) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{5}
}

type EmergencyStatus int32

const (
	EmergencyStatus_NO_EMERGENCY                EmergencyStatus = 0
	EmergencyStatus_GENERAL_EMERGENCY           EmergencyStatus = 1
	EmergencyStatus_LIFEGUARD_MEDICAL_EMERGENCY EmergencyStatus = 2
	EmergencyStatus_MINIMUM_FUEL                EmergencyStatus = 3
	EmergencyStatus_NO_COMMUNICATIONS           EmergencyStatus = 4
	EmergencyStatus_UNLAWFUL_INTERFERENCE       EmergencyStatus = 5
	EmergencyStatus_DOWNED_AIRCRAFT             EmergencyStatus = 6
	EmergencyStatus_RESERVED                    EmergencyStatus = 7
)

// Enum value maps for EmergencyStatus.
var (
	EmergencyStatus_name = map[int32]string{
		0: "NO_EMERGENCY",
		1: "GENERAL_EMERGENCY",
		2: "LIFEGUARD_MEDICAL_EMERGENCY",
		3: "MINIMUM_FUEL",
		4: "NO_COMMUNICATIONS",
		5: "UNLAWFUL_INTERFERENCE",
		6: "DOWNED_AIRCRAFT",
		7: "RESERVED",
	}
	EmergencyStatus_value = map[string]int32{
		"NO_EMERGENCY":                0,
		"GENERAL_EMERGENCY":           1,
		"LIFEGUARD_MEDICAL_EMERGENCY": 2,
		"MINIMUM_FUEL":                3,
		"NO_COMMUNICATIONS":           4,
		"UNLAWFUL_INTERFERENCE":       5,
		"DOWNED_AIRCRAFT":             6,
		"RESERVED":                    7,
	}
)

func (x EmergencyStatus) Enum() *EmergencyStatus {
	p := new(EmergencyStatus)
	*p = x
	return p
}

func (x EmergencyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmergencyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[6].Descriptor()
}

func (EmergencyStatus) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[6]
}

func (x EmergencyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmergencyStatus.Descriptor instead.
func (EmergencyStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{6}
}

type Icon int32

const (
	// Note only B738 is out of order compared to FR24 Aircraft Icons spreadsheet
	// to make it a default one
	Icon_B738      Icon = 0
	Icon_FGTR      Icon = 1
	Icon_ASW20     Icon = 2
	Icon_C206      Icon = 3
	Icon_C303      Icon = 4
	Icon_LJ60      Icon = 5
	Icon_Q300      Icon = 6
	Icon_B736      Icon = 7
	Icon_Fokker100 Icon = 8
	Icon_RJ85      Icon = 9
	Icon_A320      Icon = 10
	// B738 belongs here
	Icon_B757 Icon = 11
	Icon_B767 Icon = 12
	Icon_A3ST Icon = 13
	Icon_MD11 Icon = 14
	Icon_A330 Icon = 15
	Icon_A343 Icon = 16
	Icon_A346 Icon = 17
	Icon_B777 Icon = 18
	Icon_B747 Icon = 19
	Icon_A380 Icon = 20
	Icon_A225 Icon = 21
	Icon_SI2  Icon = 22
	Icon_EC   Icon = 23
	Icon_BALL Icon = 24
	Icon_GRND Icon = 25
	Icon_SLEI Icon = 26
	Icon_DRON Icon = 27
	Icon_SAT  Icon = 28
	Icon_ISS  Icon = 29
)

// Enum value maps for Icon.
var (
	Icon_name = map[int32]string{
		0:  "B738",
		1:  "FGTR",
		2:  "ASW20",
		3:  "C206",
		4:  "C303",
		5:  "LJ60",
		6:  "Q300",
		7:  "B736",
		8:  "Fokker100",
		9:  "RJ85",
		10: "A320",
		11: "B757",
		12: "B767",
		13: "A3ST",
		14: "MD11",
		15: "A330",
		16: "A343",
		17: "A346",
		18: "B777",
		19: "B747",
		20: "A380",
		21: "A225",
		22: "SI2",
		23: "EC",
		24: "BALL",
		25: "GRND",
		26: "SLEI",
		27: "DRON",
		28: "SAT",
		29: "ISS",
	}
	Icon_value = map[string]int32{
		"B738":      0,
		"FGTR":      1,
		"ASW20":     2,
		"C206":      3,
		"C303":      4,
		"LJ60":      5,
		"Q300":      6,
		"B736":      7,
		"Fokker100": 8,
		"RJ85":      9,
		"A320":      10,
		"B757":      11,
		"B767":      12,
		"A3ST":      13,
		"MD11":      14,
		"A330":      15,
		"A343":      16,
		"A346":      17,
		"B777":      18,
		"B747":      19,
		"A380":      20,
		"A225":      21,
		"SI2":       22,
		"EC":        23,
		"BALL":      24,
		"GRND":      25,
		"SLEI":      26,
		"DRON":      27,
		"SAT":       28,
		"ISS":       29,
	}
)

func (x Icon) Enum() *Icon {
	p := new(Icon)
	*p = x
	return p
}

func (x Icon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Icon) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[7].Descriptor()
}

func (Icon) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[7]
}

func (x Icon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Icon.Descriptor instead.
func (Icon) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{7}
}

type Status int32

const (
	Status_NORMAL        Status = 0
	Status_BACKGROUND    Status = 1
	Status_EMERGENCY     Status = 2
	Status_NOT_AVAILABLE Status = 3
	Status_LIVE          Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "NORMAL",
		1: "BACKGROUND",
		2: "EMERGENCY",
		3: "NOT_AVAILABLE",
		4: "LIVE",
	}
	Status_value = map[string]int32{
		"NORMAL":        0,
		"BACKGROUND":    1,
		"EMERGENCY":     2,
		"NOT_AVAILABLE": 3,
		"LIVE":          4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_fr24_feed_proto_enumTypes[8].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_internal_fr24_feed_proto_enumTypes[8]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{8}
}

type LiveFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bounds            *LocationBoundaries    `protobuf:"bytes,1,opt,name=bounds,proto3,oneof" json:"bounds,omitempty"`
	Settings          *VisibilitySettings    `protobuf:"bytes,2,opt,name=settings,proto3,oneof" json:"settings,omitempty"`
	Filters           []*Filter              `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	Fleets            []string               `protobuf:"bytes,4,rep,name=fleets,proto3" json:"fleets,omitempty"`
	HighlightMode     *bool                  `protobuf:"varint,5,opt,name=highlight_mode,json=highlightMode,proto3,oneof" json:"highlight_mode,omitempty"`
	Stats             *bool                  `protobuf:"varint,6,opt,name=stats,proto3,oneof" json:"stats,omitempty"`
	Limit             *uint32                `protobuf:"varint,7,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Maxage            *uint32                `protobuf:"varint,8,opt,name=maxage,proto3,oneof" json:"maxage,omitempty"`
	RestrictionMode   *RestrictionVisibility `protobuf:"varint,9,opt,name=restriction_mode,json=restrictionMode,proto3,enum=fr24.feed.api.v1.RestrictionVisibility,oneof" json:"restriction_mode,omitempty"`
	FieldMask         *fieldmaskpb.FieldMask `protobuf:"bytes,10,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	SelectedFlightIds []uint32               `protobuf:"fixed32,11,rep,packed,name=selected_flight_ids,json=selectedFlightIds,proto3" json:"selected_flight_ids,omitempty"`
}

func (x *LiveFeedRequest) Reset() {
	*x = LiveFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedRequest) ProtoMessage() {}

func (x *LiveFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedRequest.ProtoReflect.Descriptor instead.
func (*LiveFeedRequest) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{0}
}

func (x *LiveFeedRequest) GetBounds() *LocationBoundaries {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *LiveFeedRequest) GetSettings() *VisibilitySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *LiveFeedRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *LiveFeedRequest) GetFleets() []string {
	if x != nil {
		return x.Fleets
	}
	return nil
}

func (x *LiveFeedRequest) GetHighlightMode() bool {
	if x != nil && x.HighlightMode != nil {
		return *x.HighlightMode
	}
	return false
}

func (x *LiveFeedRequest) GetStats() bool {
	if x != nil && x.Stats != nil {
		return *x.Stats
	}
	return false
}

func (x *LiveFeedRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *LiveFeedRequest) GetMaxage() uint32 {
	if x != nil && x.Maxage != nil {
		return *x.Maxage
	}
	return 0
}

func (x *LiveFeedRequest) GetRestrictionMode() RestrictionVisibility {
	if x != nil && x.RestrictionMode != nil {
		return *x.RestrictionMode
	}
	return RestrictionVisibility_NOT_VISIBLE
}

func (x *LiveFeedRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *LiveFeedRequest) GetSelectedFlightIds() []uint32 {
	if x != nil {
		return x.SelectedFlightIds
	}
	return nil
}

type VisibilitySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources        []DataSource `protobuf:"varint,1,rep,packed,name=sources,proto3,enum=fr24.feed.api.v1.DataSource" json:"sources,omitempty"`
	Services       []Service    `protobuf:"varint,2,rep,packed,name=services,proto3,enum=fr24.feed.api.v1.Service" json:"services,omitempty"`
	TrafficType    *TrafficType `protobuf:"varint,3,opt,name=traffic_type,json=trafficType,proto3,enum=fr24.feed.api.v1.TrafficType,oneof" json:"traffic_type,omitempty"`
	OnlyRestricted *bool        `protobuf:"varint,4,opt,name=only_restricted,json=onlyRestricted,proto3,oneof" json:"only_restricted,omitempty"`
}

func (x *VisibilitySettings) Reset() {
	*x = VisibilitySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisibilitySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibilitySettings) ProtoMessage() {}

func (x *VisibilitySettings) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibilitySettings.ProtoReflect.Descriptor instead.
func (*VisibilitySettings) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{1}
}

func (x *VisibilitySettings) GetSources() []DataSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *VisibilitySettings) GetServices() []Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *VisibilitySettings) GetTrafficType() TrafficType {
	if x != nil && x.TrafficType != nil {
		return *x.TrafficType
	}
	return TrafficType_NONE
}

func (x *VisibilitySettings) GetOnlyRestricted() bool {
	if x != nil && x.OnlyRestricted != nil {
		return *x.OnlyRestricted
	}
	return false
}

type PlaybackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveFeedRequest *LiveFeedRequest `protobuf:"bytes,1,opt,name=live_feed_request,json=liveFeedRequest,proto3,oneof" json:"live_feed_request,omitempty"`
	Timestamp       *uint64          `protobuf:"varint,2,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	Prefetch        *uint64          `protobuf:"varint,3,opt,name=prefetch,proto3,oneof" json:"prefetch,omitempty"`
	Hfreq           *bool            `protobuf:"varint,4,opt,name=hfreq,proto3,oneof" json:"hfreq,omitempty"`
}

func (x *PlaybackRequest) Reset() {
	*x = PlaybackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaybackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackRequest) ProtoMessage() {}

func (x *PlaybackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackRequest.ProtoReflect.Descriptor instead.
func (*PlaybackRequest) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{2}
}

func (x *PlaybackRequest) GetLiveFeedRequest() *LiveFeedRequest {
	if x != nil {
		return x.LiveFeedRequest
	}
	return nil
}

func (x *PlaybackRequest) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *PlaybackRequest) GetPrefetch() uint64 {
	if x != nil && x.Prefetch != nil {
		return *x.Prefetch
	}
	return 0
}

func (x *PlaybackRequest) GetHfreq() bool {
	if x != nil && x.Hfreq != nil {
		return *x.Hfreq
	}
	return false
}

type LiveFlightsStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightIds []uint32 `protobuf:"fixed32,1,rep,packed,name=flight_ids,json=flightIds,proto3" json:"flight_ids,omitempty"`
}

func (x *LiveFlightsStatusRequest) Reset() {
	*x = LiveFlightsStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFlightsStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFlightsStatusRequest) ProtoMessage() {}

func (x *LiveFlightsStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFlightsStatusRequest.ProtoReflect.Descriptor instead.
func (*LiveFlightsStatusRequest) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{3}
}

func (x *LiveFlightsStatusRequest) GetFlightIds() []uint32 {
	if x != nil {
		return x.FlightIds
	}
	return nil
}

type LiveFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flights         []*Flight `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
	Stats           *Stats    `protobuf:"bytes,2,opt,name=stats,proto3,oneof" json:"stats,omitempty"`
	SelectedFlights []*Flight `protobuf:"bytes,3,rep,name=selected_flights,json=selectedFlights,proto3" json:"selected_flights,omitempty"`
}

func (x *LiveFeedResponse) Reset() {
	*x = LiveFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse) ProtoMessage() {}

func (x *LiveFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{4}
}

func (x *LiveFeedResponse) GetFlights() []*Flight {
	if x != nil {
		return x.Flights
	}
	return nil
}

func (x *LiveFeedResponse) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *LiveFeedResponse) GetSelectedFlights() []*Flight {
	if x != nil {
		return x.SelectedFlights
	}
	return nil
}

type PlaybackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveFeedResponse *LiveFeedResponse `protobuf:"bytes,1,opt,name=live_feed_response,json=liveFeedResponse,proto3,oneof" json:"live_feed_response,omitempty"`
}

func (x *PlaybackResponse) Reset() {
	*x = PlaybackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaybackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackResponse) ProtoMessage() {}

func (x *PlaybackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackResponse.ProtoReflect.Descriptor instead.
func (*PlaybackResponse) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{5}
}

func (x *PlaybackResponse) GetLiveFeedResponse() *LiveFeedResponse {
	if x != nil {
		return x.LiveFeedResponse
	}
	return nil
}

type LiveFlightsStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flights map[uint64]*LiveFlightStatusData `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LiveFlightsStatusResponse) Reset() {
	*x = LiveFlightsStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFlightsStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFlightsStatusResponse) ProtoMessage() {}

func (x *LiveFlightsStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFlightsStatusResponse.ProtoReflect.Descriptor instead.
func (*LiveFlightsStatusResponse) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{6}
}

func (x *LiveFlightsStatusResponse) GetFlights() map[uint64]*LiveFlightStatusData {
	if x != nil {
		return x.Flights
	}
	return nil
}

type Geolocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon float32 `protobuf:"fixed32,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *Geolocation) Reset() {
	*x = Geolocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geolocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geolocation) ProtoMessage() {}

func (x *Geolocation) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geolocation.ProtoReflect.Descriptor instead.
func (*Geolocation) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{7}
}

func (x *Geolocation) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Geolocation) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type NearestFlightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Geolocation `protobuf:"bytes,1,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Radius   *uint32      `protobuf:"varint,2,opt,name=radius,proto3,oneof" json:"radius,omitempty"`
	Limit    *uint32      `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *NearestFlightsRequest) Reset() {
	*x = NearestFlightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestFlightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestFlightsRequest) ProtoMessage() {}

func (x *NearestFlightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestFlightsRequest.ProtoReflect.Descriptor instead.
func (*NearestFlightsRequest) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{8}
}

func (x *NearestFlightsRequest) GetLocation() *Geolocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NearestFlightsRequest) GetRadius() uint32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

func (x *NearestFlightsRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type NearbyFlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flight   *Flight `protobuf:"bytes,1,opt,name=flight,proto3,oneof" json:"flight,omitempty"`
	Distance *uint32 `protobuf:"varint,2,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
}

func (x *NearbyFlight) Reset() {
	*x = NearbyFlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearbyFlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearbyFlight) ProtoMessage() {}

func (x *NearbyFlight) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearbyFlight.ProtoReflect.Descriptor instead.
func (*NearbyFlight) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{9}
}

func (x *NearbyFlight) GetFlight() *Flight {
	if x != nil {
		return x.Flight
	}
	return nil
}

func (x *NearbyFlight) GetDistance() uint32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

type NearestFlightsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flights []*NearbyFlight `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
}

func (x *NearestFlightsResponse) Reset() {
	*x = NearestFlightsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearestFlightsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearestFlightsResponse) ProtoMessage() {}

func (x *NearestFlightsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearestFlightsResponse.ProtoReflect.Descriptor instead.
func (*NearestFlightsResponse) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{10}
}

func (x *NearestFlightsResponse) GetFlights() []*NearbyFlight {
	if x != nil {
		return x.Flights
	}
	return nil
}

type FetchSearchIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchSearchIndexRequest) Reset() {
	*x = FetchSearchIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSearchIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSearchIndexRequest) ProtoMessage() {}

func (x *FetchSearchIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSearchIndexRequest.ProtoReflect.Descriptor instead.
func (*FetchSearchIndexRequest) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{11}
}

type FlightSearchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reg        *string  `protobuf:"bytes,1,opt,name=reg,proto3,oneof" json:"reg,omitempty"`
	SchdFrom   *string  `protobuf:"bytes,2,opt,name=schd_from,json=schdFrom,proto3,oneof" json:"schd_from,omitempty"`
	SchdTo     *string  `protobuf:"bytes,3,opt,name=schd_to,json=schdTo,proto3,oneof" json:"schd_to,omitempty"`
	Flight     *string  `protobuf:"bytes,4,opt,name=flight,proto3,oneof" json:"flight,omitempty"`
	Operator   *string  `protobuf:"bytes,5,opt,name=operator,proto3,oneof" json:"operator,omitempty"`
	AcType     *string  `protobuf:"bytes,6,opt,name=ac_type,json=acType,proto3,oneof" json:"ac_type,omitempty"`
	Lat        *float32 `protobuf:"fixed32,7,opt,name=lat,proto3,oneof" json:"lat,omitempty"`
	Lon        *float32 `protobuf:"fixed32,8,opt,name=lon,proto3,oneof" json:"lon,omitempty"`
	Callsign   *string  `protobuf:"bytes,9,opt,name=callsign,proto3,oneof" json:"callsign,omitempty"`
	Id         *uint32  `protobuf:"varint,10,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Restricted *bool    `protobuf:"varint,11,opt,name=restricted,proto3,oneof" json:"restricted,omitempty"`
}

func (x *FlightSearchData) Reset() {
	*x = FlightSearchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightSearchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightSearchData) ProtoMessage() {}

func (x *FlightSearchData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightSearchData.ProtoReflect.Descriptor instead.
func (*FlightSearchData) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{12}
}

func (x *FlightSearchData) GetReg() string {
	if x != nil && x.Reg != nil {
		return *x.Reg
	}
	return ""
}

func (x *FlightSearchData) GetSchdFrom() string {
	if x != nil && x.SchdFrom != nil {
		return *x.SchdFrom
	}
	return ""
}

func (x *FlightSearchData) GetSchdTo() string {
	if x != nil && x.SchdTo != nil {
		return *x.SchdTo
	}
	return ""
}

func (x *FlightSearchData) GetFlight() string {
	if x != nil && x.Flight != nil {
		return *x.Flight
	}
	return ""
}

func (x *FlightSearchData) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *FlightSearchData) GetAcType() string {
	if x != nil && x.AcType != nil {
		return *x.AcType
	}
	return ""
}

func (x *FlightSearchData) GetLat() float32 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *FlightSearchData) GetLon() float32 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *FlightSearchData) GetCallsign() string {
	if x != nil && x.Callsign != nil {
		return *x.Callsign
	}
	return ""
}

func (x *FlightSearchData) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FlightSearchData) GetRestricted() bool {
	if x != nil && x.Restricted != nil {
		return *x.Restricted
	}
	return false
}

type FetchSearchIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flights []*FlightSearchData `protobuf:"bytes,1,rep,name=flights,proto3" json:"flights,omitempty"`
}

func (x *FetchSearchIndexResponse) Reset() {
	*x = FetchSearchIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchSearchIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchSearchIndexResponse) ProtoMessage() {}

func (x *FetchSearchIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchSearchIndexResponse.ProtoReflect.Descriptor instead.
func (*FetchSearchIndexResponse) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{13}
}

func (x *FetchSearchIndexResponse) GetFlights() []*FlightSearchData {
	if x != nil {
		return x.Flights
	}
	return nil
}

type Interval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *int32 `protobuf:"varint,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	Max *int32 `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
}

func (x *Interval) Reset() {
	*x = Interval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interval) ProtoMessage() {}

func (x *Interval) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interval.ProtoReflect.Descriptor instead.
func (*Interval) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{14}
}

func (x *Interval) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *Interval) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type AirportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this should be oneof but as of 09.02.2023 grpc-web has issues with oneof
	Iata      *string            `protobuf:"bytes,1,opt,name=iata,proto3,oneof" json:"iata,omitempty"`
	CountryId *uint32            `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3,oneof" json:"country_id,omitempty"`
	Type      *AirportFilterType `protobuf:"varint,3,opt,name=type,proto3,enum=fr24.feed.api.v1.AirportFilterType,oneof" json:"type,omitempty"`
}

func (x *AirportFilter) Reset() {
	*x = AirportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirportFilter) ProtoMessage() {}

func (x *AirportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirportFilter.ProtoReflect.Descriptor instead.
func (*AirportFilter) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{15}
}

func (x *AirportFilter) GetIata() string {
	if x != nil && x.Iata != nil {
		return *x.Iata
	}
	return ""
}

func (x *AirportFilter) GetCountryId() uint32 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

func (x *AirportFilter) GetType() AirportFilterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AirportFilterType_BOTH
}

type AirlineFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icao *string            `protobuf:"bytes,1,opt,name=icao,proto3,oneof" json:"icao,omitempty"`
	Type *AirlineFilterType `protobuf:"varint,2,opt,name=type,proto3,enum=fr24.feed.api.v1.AirlineFilterType,oneof" json:"type,omitempty"`
}

func (x *AirlineFilter) Reset() {
	*x = AirlineFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirlineFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirlineFilter) ProtoMessage() {}

func (x *AirlineFilter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirlineFilter.ProtoReflect.Descriptor instead.
func (*AirlineFilter) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{16}
}

func (x *AirlineFilter) GetIcao() string {
	if x != nil && x.Icao != nil {
		return *x.Icao
	}
	return ""
}

func (x *AirlineFilter) GetType() AirlineFilterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AirlineFilterType_PAINTED_AS
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AltitudeRanges  []*Interval      `protobuf:"bytes,1,rep,name=altitude_ranges,json=altitudeRanges,proto3" json:"altitude_ranges,omitempty"`
	SpeedRanges     []*Interval      `protobuf:"bytes,2,rep,name=speed_ranges,json=speedRanges,proto3" json:"speed_ranges,omitempty"`
	Airlines        []*AirlineFilter `protobuf:"bytes,3,rep,name=airlines,proto3" json:"airlines,omitempty"`
	Callsigns       []string         `protobuf:"bytes,4,rep,name=callsigns,proto3" json:"callsigns,omitempty"`
	Radars          []string         `protobuf:"bytes,5,rep,name=radars,proto3" json:"radars,omitempty"`
	Regs            []string         `protobuf:"bytes,6,rep,name=regs,proto3" json:"regs,omitempty"`
	Airports        []*AirportFilter `protobuf:"bytes,7,rep,name=airports,proto3" json:"airports,omitempty"`
	Flights         []string         `protobuf:"bytes,8,rep,name=flights,proto3" json:"flights,omitempty"`
	Types           []string         `protobuf:"bytes,9,rep,name=types,proto3" json:"types,omitempty"`
	BirthYearRanges []*Interval      `protobuf:"bytes,10,rep,name=birth_year_ranges,json=birthYearRanges,proto3" json:"birth_year_ranges,omitempty"`
	Squawks         []uint32         `protobuf:"varint,11,rep,packed,name=squawks,proto3" json:"squawks,omitempty"`
	Origins         []*AirportFilter `protobuf:"bytes,12,rep,name=origins,proto3" json:"origins,omitempty"`
	Destinations    []*AirportFilter `protobuf:"bytes,13,rep,name=destinations,proto3" json:"destinations,omitempty"`
	Categories      []Service        `protobuf:"varint,14,rep,packed,name=categories,proto3,enum=fr24.feed.api.v1.Service" json:"categories,omitempty"`
	Airspaces       []string         `protobuf:"bytes,15,rep,name=airspaces,proto3" json:"airspaces,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{17}
}

func (x *Filter) GetAltitudeRanges() []*Interval {
	if x != nil {
		return x.AltitudeRanges
	}
	return nil
}

func (x *Filter) GetSpeedRanges() []*Interval {
	if x != nil {
		return x.SpeedRanges
	}
	return nil
}

func (x *Filter) GetAirlines() []*AirlineFilter {
	if x != nil {
		return x.Airlines
	}
	return nil
}

func (x *Filter) GetCallsigns() []string {
	if x != nil {
		return x.Callsigns
	}
	return nil
}

func (x *Filter) GetRadars() []string {
	if x != nil {
		return x.Radars
	}
	return nil
}

func (x *Filter) GetRegs() []string {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *Filter) GetAirports() []*AirportFilter {
	if x != nil {
		return x.Airports
	}
	return nil
}

func (x *Filter) GetFlights() []string {
	if x != nil {
		return x.Flights
	}
	return nil
}

func (x *Filter) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Filter) GetBirthYearRanges() []*Interval {
	if x != nil {
		return x.BirthYearRanges
	}
	return nil
}

func (x *Filter) GetSquawks() []uint32 {
	if x != nil {
		return x.Squawks
	}
	return nil
}

func (x *Filter) GetOrigins() []*AirportFilter {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *Filter) GetDestinations() []*AirportFilter {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *Filter) GetCategories() []Service {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Filter) GetAirspaces() []string {
	if x != nil {
		return x.Airspaces
	}
	return nil
}

type LocationBoundaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	North float32 `protobuf:"fixed32,1,opt,name=north,proto3" json:"north,omitempty"`
	South float32 `protobuf:"fixed32,2,opt,name=south,proto3" json:"south,omitempty"`
	West  float32 `protobuf:"fixed32,3,opt,name=west,proto3" json:"west,omitempty"`
	East  float32 `protobuf:"fixed32,4,opt,name=east,proto3" json:"east,omitempty"`
}

func (x *LocationBoundaries) Reset() {
	*x = LocationBoundaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationBoundaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationBoundaries) ProtoMessage() {}

func (x *LocationBoundaries) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationBoundaries.ProtoReflect.Descriptor instead.
func (*LocationBoundaries) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{18}
}

func (x *LocationBoundaries) GetNorth() float32 {
	if x != nil {
		return x.North
	}
	return 0
}

func (x *LocationBoundaries) GetSouth() float32 {
	if x != nil {
		return x.South
	}
	return 0
}

func (x *LocationBoundaries) GetWest() float32 {
	if x != nil {
		return x.West
	}
	return 0
}

func (x *LocationBoundaries) GetEast() float32 {
	if x != nil {
		return x.East
	}
	return 0
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From       *string `protobuf:"bytes,1,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To         *string `protobuf:"bytes,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
	DivertedTo *string `protobuf:"bytes,3,opt,name=diverted_to,json=divertedTo,proto3,oneof" json:"diverted_to,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{19}
}

func (x *Route) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *Route) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *Route) GetDivertedTo() string {
	if x != nil && x.DivertedTo != nil {
		return *x.DivertedTo
	}
	return ""
}

type EmsAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qnh      *bool `protobuf:"varint,1,opt,name=qnh,proto3,oneof" json:"qnh,omitempty"`
	Amcp     *bool `protobuf:"varint,2,opt,name=amcp,proto3,oneof" json:"amcp,omitempty"`
	Afms     *bool `protobuf:"varint,3,opt,name=afms,proto3,oneof" json:"afms,omitempty"`
	Oat      *bool `protobuf:"varint,4,opt,name=oat,proto3,oneof" json:"oat,omitempty"`
	Ias      *bool `protobuf:"varint,5,opt,name=ias,proto3,oneof" json:"ias,omitempty"`
	Tas      *bool `protobuf:"varint,6,opt,name=tas,proto3,oneof" json:"tas,omitempty"`
	Mach     *bool `protobuf:"varint,7,opt,name=mach,proto3,oneof" json:"mach,omitempty"`
	Agps     *bool `protobuf:"varint,8,opt,name=agps,proto3,oneof" json:"agps,omitempty"`
	Agpsdiff *bool `protobuf:"varint,9,opt,name=agpsdiff,proto3,oneof" json:"agpsdiff,omitempty"`
	Apflags  *bool `protobuf:"varint,10,opt,name=apflags,proto3,oneof" json:"apflags,omitempty"`
	WindDir  *bool `protobuf:"varint,11,opt,name=wind_dir,json=windDir,proto3,oneof" json:"wind_dir,omitempty"`
	WindSpd  *bool `protobuf:"varint,12,opt,name=wind_spd,json=windSpd,proto3,oneof" json:"wind_spd,omitempty"`
	Rs       *bool `protobuf:"varint,13,opt,name=rs,proto3,oneof" json:"rs,omitempty"`
}

func (x *EmsAvailability) Reset() {
	*x = EmsAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmsAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmsAvailability) ProtoMessage() {}

func (x *EmsAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmsAvailability.ProtoReflect.Descriptor instead.
func (*EmsAvailability) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{20}
}

func (x *EmsAvailability) GetQnh() bool {
	if x != nil && x.Qnh != nil {
		return *x.Qnh
	}
	return false
}

func (x *EmsAvailability) GetAmcp() bool {
	if x != nil && x.Amcp != nil {
		return *x.Amcp
	}
	return false
}

func (x *EmsAvailability) GetAfms() bool {
	if x != nil && x.Afms != nil {
		return *x.Afms
	}
	return false
}

func (x *EmsAvailability) GetOat() bool {
	if x != nil && x.Oat != nil {
		return *x.Oat
	}
	return false
}

func (x *EmsAvailability) GetIas() bool {
	if x != nil && x.Ias != nil {
		return *x.Ias
	}
	return false
}

func (x *EmsAvailability) GetTas() bool {
	if x != nil && x.Tas != nil {
		return *x.Tas
	}
	return false
}

func (x *EmsAvailability) GetMach() bool {
	if x != nil && x.Mach != nil {
		return *x.Mach
	}
	return false
}

func (x *EmsAvailability) GetAgps() bool {
	if x != nil && x.Agps != nil {
		return *x.Agps
	}
	return false
}

func (x *EmsAvailability) GetAgpsdiff() bool {
	if x != nil && x.Agpsdiff != nil {
		return *x.Agpsdiff
	}
	return false
}

func (x *EmsAvailability) GetApflags() bool {
	if x != nil && x.Apflags != nil {
		return *x.Apflags
	}
	return false
}

func (x *EmsAvailability) GetWindDir() bool {
	if x != nil && x.WindDir != nil {
		return *x.WindDir
	}
	return false
}

func (x *EmsAvailability) GetWindSpd() bool {
	if x != nil && x.WindSpd != nil {
		return *x.WindSpd
	}
	return false
}

func (x *EmsAvailability) GetRs() bool {
	if x != nil && x.Rs != nil {
		return *x.Rs
	}
	return false
}

type EmsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qnh      *int32           `protobuf:"varint,1,opt,name=qnh,proto3,oneof" json:"qnh,omitempty"`
	Amcp     *int32           `protobuf:"varint,2,opt,name=amcp,proto3,oneof" json:"amcp,omitempty"`
	Afms     *int32           `protobuf:"varint,3,opt,name=afms,proto3,oneof" json:"afms,omitempty"`
	Oat      *int32           `protobuf:"varint,4,opt,name=oat,proto3,oneof" json:"oat,omitempty"`
	Ias      *int32           `protobuf:"varint,5,opt,name=ias,proto3,oneof" json:"ias,omitempty"`
	Tas      *int32           `protobuf:"varint,6,opt,name=tas,proto3,oneof" json:"tas,omitempty"`
	Mach     *int32           `protobuf:"varint,7,opt,name=mach,proto3,oneof" json:"mach,omitempty"`
	Agps     *int32           `protobuf:"varint,8,opt,name=agps,proto3,oneof" json:"agps,omitempty"`
	Agpsdiff *int32           `protobuf:"varint,9,opt,name=agpsdiff,proto3,oneof" json:"agpsdiff,omitempty"`
	Apflags  *int32           `protobuf:"varint,10,opt,name=apflags,proto3,oneof" json:"apflags,omitempty"`
	WindDir  *int32           `protobuf:"varint,11,opt,name=wind_dir,json=windDir,proto3,oneof" json:"wind_dir,omitempty"`
	WindSpd  *int32           `protobuf:"varint,12,opt,name=wind_spd,json=windSpd,proto3,oneof" json:"wind_spd,omitempty"`
	Rs       *EmergencyStatus `protobuf:"varint,13,opt,name=rs,proto3,enum=fr24.feed.api.v1.EmergencyStatus,oneof" json:"rs,omitempty"`
}

func (x *EmsInfo) Reset() {
	*x = EmsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmsInfo) ProtoMessage() {}

func (x *EmsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmsInfo.ProtoReflect.Descriptor instead.
func (*EmsInfo) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{21}
}

func (x *EmsInfo) GetQnh() int32 {
	if x != nil && x.Qnh != nil {
		return *x.Qnh
	}
	return 0
}

func (x *EmsInfo) GetAmcp() int32 {
	if x != nil && x.Amcp != nil {
		return *x.Amcp
	}
	return 0
}

func (x *EmsInfo) GetAfms() int32 {
	if x != nil && x.Afms != nil {
		return *x.Afms
	}
	return 0
}

func (x *EmsInfo) GetOat() int32 {
	if x != nil && x.Oat != nil {
		return *x.Oat
	}
	return 0
}

func (x *EmsInfo) GetIas() int32 {
	if x != nil && x.Ias != nil {
		return *x.Ias
	}
	return 0
}

func (x *EmsInfo) GetTas() int32 {
	if x != nil && x.Tas != nil {
		return *x.Tas
	}
	return 0
}

func (x *EmsInfo) GetMach() int32 {
	if x != nil && x.Mach != nil {
		return *x.Mach
	}
	return 0
}

func (x *EmsInfo) GetAgps() int32 {
	if x != nil && x.Agps != nil {
		return *x.Agps
	}
	return 0
}

func (x *EmsInfo) GetAgpsdiff() int32 {
	if x != nil && x.Agpsdiff != nil {
		return *x.Agpsdiff
	}
	return 0
}

func (x *EmsInfo) GetApflags() int32 {
	if x != nil && x.Apflags != nil {
		return *x.Apflags
	}
	return 0
}

func (x *EmsInfo) GetWindDir() int32 {
	if x != nil && x.WindDir != nil {
		return *x.WindDir
	}
	return 0
}

func (x *EmsInfo) GetWindSpd() int32 {
	if x != nil && x.WindSpd != nil {
		return *x.WindSpd
	}
	return 0
}

func (x *EmsInfo) GetRs() EmergencyStatus {
	if x != nil && x.Rs != nil {
		return *x.Rs
	}
	return EmergencyStatus_NO_EMERGENCY
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Std *int32 `protobuf:"varint,1,opt,name=std,proto3,oneof" json:"std,omitempty"`
	Etd *int32 `protobuf:"varint,2,opt,name=etd,proto3,oneof" json:"etd,omitempty"`
	Atd *int32 `protobuf:"varint,3,opt,name=atd,proto3,oneof" json:"atd,omitempty"`
	Sta *int32 `protobuf:"varint,4,opt,name=sta,proto3,oneof" json:"sta,omitempty"`
	Eta *int32 `protobuf:"varint,5,opt,name=eta,proto3,oneof" json:"eta,omitempty"`
	Ata *int32 `protobuf:"varint,6,opt,name=ata,proto3,oneof" json:"ata,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{22}
}

func (x *Schedule) GetStd() int32 {
	if x != nil && x.Std != nil {
		return *x.Std
	}
	return 0
}

func (x *Schedule) GetEtd() int32 {
	if x != nil && x.Etd != nil {
		return *x.Etd
	}
	return 0
}

func (x *Schedule) GetAtd() int32 {
	if x != nil && x.Atd != nil {
		return *x.Atd
	}
	return 0
}

func (x *Schedule) GetSta() int32 {
	if x != nil && x.Sta != nil {
		return *x.Sta
	}
	return 0
}

func (x *Schedule) GetEta() int32 {
	if x != nil && x.Eta != nil {
		return *x.Eta
	}
	return 0
}

func (x *Schedule) GetAta() int32 {
	if x != nil && x.Ata != nil {
		return *x.Ata
	}
	return 0
}

type ScheduledInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduledDeparture *uint32 `protobuf:"varint,1,opt,name=scheduled_departure,json=scheduledDeparture,proto3,oneof" json:"scheduled_departure,omitempty"`
	ScheduledArrival   *uint32 `protobuf:"varint,2,opt,name=scheduled_arrival,json=scheduledArrival,proto3,oneof" json:"scheduled_arrival,omitempty"`
	ActualDeparture    *uint32 `protobuf:"varint,3,opt,name=actual_departure,json=actualDeparture,proto3,oneof" json:"actual_departure,omitempty"`
	ActualArrival      *uint32 `protobuf:"varint,4,opt,name=actual_arrival,json=actualArrival,proto3,oneof" json:"actual_arrival,omitempty"`
	ArrTerminal        *string `protobuf:"bytes,5,opt,name=arr_terminal,json=arrTerminal,proto3,oneof" json:"arr_terminal,omitempty"`
	ArrGate            *string `protobuf:"bytes,6,opt,name=arr_gate,json=arrGate,proto3,oneof" json:"arr_gate,omitempty"`
	BaggageBelt        *string `protobuf:"bytes,7,opt,name=baggage_belt,json=baggageBelt,proto3,oneof" json:"baggage_belt,omitempty"`
}

func (x *ScheduledInfo) Reset() {
	*x = ScheduledInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledInfo) ProtoMessage() {}

func (x *ScheduledInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledInfo.ProtoReflect.Descriptor instead.
func (*ScheduledInfo) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{23}
}

func (x *ScheduledInfo) GetScheduledDeparture() uint32 {
	if x != nil && x.ScheduledDeparture != nil {
		return *x.ScheduledDeparture
	}
	return 0
}

func (x *ScheduledInfo) GetScheduledArrival() uint32 {
	if x != nil && x.ScheduledArrival != nil {
		return *x.ScheduledArrival
	}
	return 0
}

func (x *ScheduledInfo) GetActualDeparture() uint32 {
	if x != nil && x.ActualDeparture != nil {
		return *x.ActualDeparture
	}
	return 0
}

func (x *ScheduledInfo) GetActualArrival() uint32 {
	if x != nil && x.ActualArrival != nil {
		return *x.ActualArrival
	}
	return 0
}

func (x *ScheduledInfo) GetArrTerminal() string {
	if x != nil && x.ArrTerminal != nil {
		return *x.ArrTerminal
	}
	return ""
}

func (x *ScheduledInfo) GetArrGate() string {
	if x != nil && x.ArrGate != nil {
		return *x.ArrGate
	}
	return ""
}

func (x *ScheduledInfo) GetBaggageBelt() string {
	if x != nil && x.BaggageBelt != nil {
		return *x.BaggageBelt
	}
	return ""
}

type RouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginId      *uint32 `protobuf:"varint,1,opt,name=origin_id,json=originId,proto3,oneof" json:"origin_id,omitempty"`
	DestinationId *uint32 `protobuf:"varint,2,opt,name=destination_id,json=destinationId,proto3,oneof" json:"destination_id,omitempty"`
	DivertedToId  *uint32 `protobuf:"varint,3,opt,name=diverted_to_id,json=divertedToId,proto3,oneof" json:"diverted_to_id,omitempty"`
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{24}
}

func (x *RouteInfo) GetOriginId() uint32 {
	if x != nil && x.OriginId != nil {
		return *x.OriginId
	}
	return 0
}

func (x *RouteInfo) GetDestinationId() uint32 {
	if x != nil && x.DestinationId != nil {
		return *x.DestinationId
	}
	return 0
}

func (x *RouteInfo) GetDivertedToId() uint32 {
	if x != nil && x.DivertedToId != nil {
		return *x.DivertedToId
	}
	return 0
}

type AircraftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullDescription *string `protobuf:"bytes,1,opt,name=full_description,json=fullDescription,proto3,oneof" json:"full_description,omitempty"`
	Msn             *string `protobuf:"bytes,2,opt,name=msn,proto3,oneof" json:"msn,omitempty"`
}

func (x *AircraftInfo) Reset() {
	*x = AircraftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AircraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AircraftInfo) ProtoMessage() {}

func (x *AircraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AircraftInfo.ProtoReflect.Descriptor instead.
func (*AircraftInfo) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{25}
}

func (x *AircraftInfo) GetFullDescription() string {
	if x != nil && x.FullDescription != nil {
		return *x.FullDescription
	}
	return ""
}

func (x *AircraftInfo) GetMsn() string {
	if x != nil && x.Msn != nil {
		return *x.Msn
	}
	return ""
}

type ExtraFlightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flight               *string          `protobuf:"bytes,1,opt,name=flight,proto3,oneof" json:"flight,omitempty"`
	Reg                  *string          `protobuf:"bytes,2,opt,name=reg,proto3,oneof" json:"reg,omitempty"`
	Route                *Route           `protobuf:"bytes,3,opt,name=route,proto3,oneof" json:"route,omitempty"`
	Type                 *string          `protobuf:"bytes,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Squawk               *int32           `protobuf:"varint,5,opt,name=squawk,proto3,oneof" json:"squawk,omitempty"`
	Vspeed               *int32           `protobuf:"varint,6,opt,name=vspeed,proto3,oneof" json:"vspeed,omitempty"`
	Age                  *string          `protobuf:"bytes,7,opt,name=age,proto3,oneof" json:"age,omitempty"`
	CountryOfReg         *int32           `protobuf:"varint,8,opt,name=country_of_reg,json=countryOfReg,proto3,oneof" json:"country_of_reg,omitempty"`
	Schedule             *Schedule        `protobuf:"bytes,9,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	LogoId               *uint32          `protobuf:"varint,10,opt,name=logo_id,json=logoId,proto3,oneof" json:"logo_id,omitempty"`
	Airspace             *string          `protobuf:"bytes,11,opt,name=airspace,proto3,oneof" json:"airspace,omitempty"`
	EmsInfo              *EmsInfo         `protobuf:"bytes,12,opt,name=ems_info,json=emsInfo,proto3,oneof" json:"ems_info,omitempty"`
	EmsAvailability      *EmsAvailability `protobuf:"bytes,13,opt,name=ems_availability,json=emsAvailability,proto3,oneof" json:"ems_availability,omitempty"`
	IcaoAddress          *uint32          `protobuf:"varint,14,opt,name=icao_address,json=icaoAddress,proto3,oneof" json:"icao_address,omitempty"`
	OperatedById         *uint32          `protobuf:"varint,15,opt,name=operated_by_id,json=operatedById,proto3,oneof" json:"operated_by_id,omitempty"`
	SquawkAvailability   *bool            `protobuf:"varint,16,opt,name=squawk_availability,json=squawkAvailability,proto3,oneof" json:"squawk_availability,omitempty"`
	VspeedAvailability   *bool            `protobuf:"varint,17,opt,name=vspeed_availability,json=vspeedAvailability,proto3,oneof" json:"vspeed_availability,omitempty"`
	AirspaceAvailability *bool            `protobuf:"varint,18,opt,name=airspace_availability,json=airspaceAvailability,proto3,oneof" json:"airspace_availability,omitempty"`
}

func (x *ExtraFlightInfo) Reset() {
	*x = ExtraFlightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraFlightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraFlightInfo) ProtoMessage() {}

func (x *ExtraFlightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraFlightInfo.ProtoReflect.Descriptor instead.
func (*ExtraFlightInfo) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{26}
}

func (x *ExtraFlightInfo) GetFlight() string {
	if x != nil && x.Flight != nil {
		return *x.Flight
	}
	return ""
}

func (x *ExtraFlightInfo) GetReg() string {
	if x != nil && x.Reg != nil {
		return *x.Reg
	}
	return ""
}

func (x *ExtraFlightInfo) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *ExtraFlightInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ExtraFlightInfo) GetSquawk() int32 {
	if x != nil && x.Squawk != nil {
		return *x.Squawk
	}
	return 0
}

func (x *ExtraFlightInfo) GetVspeed() int32 {
	if x != nil && x.Vspeed != nil {
		return *x.Vspeed
	}
	return 0
}

func (x *ExtraFlightInfo) GetAge() string {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return ""
}

func (x *ExtraFlightInfo) GetCountryOfReg() int32 {
	if x != nil && x.CountryOfReg != nil {
		return *x.CountryOfReg
	}
	return 0
}

func (x *ExtraFlightInfo) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ExtraFlightInfo) GetLogoId() uint32 {
	if x != nil && x.LogoId != nil {
		return *x.LogoId
	}
	return 0
}

func (x *ExtraFlightInfo) GetAirspace() string {
	if x != nil && x.Airspace != nil {
		return *x.Airspace
	}
	return ""
}

func (x *ExtraFlightInfo) GetEmsInfo() *EmsInfo {
	if x != nil {
		return x.EmsInfo
	}
	return nil
}

func (x *ExtraFlightInfo) GetEmsAvailability() *EmsAvailability {
	if x != nil {
		return x.EmsAvailability
	}
	return nil
}

func (x *ExtraFlightInfo) GetIcaoAddress() uint32 {
	if x != nil && x.IcaoAddress != nil {
		return *x.IcaoAddress
	}
	return 0
}

func (x *ExtraFlightInfo) GetOperatedById() uint32 {
	if x != nil && x.OperatedById != nil {
		return *x.OperatedById
	}
	return 0
}

func (x *ExtraFlightInfo) GetSquawkAvailability() bool {
	if x != nil && x.SquawkAvailability != nil {
		return *x.SquawkAvailability
	}
	return false
}

func (x *ExtraFlightInfo) GetVspeedAvailability() bool {
	if x != nil && x.VspeedAvailability != nil {
		return *x.VspeedAvailability
	}
	return false
}

func (x *ExtraFlightInfo) GetAirspaceAvailability() bool {
	if x != nil && x.AirspaceAvailability != nil {
		return *x.AirspaceAvailability
	}
	return false
}

type Flight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightId  *uint32          `protobuf:"varint,1,opt,name=flight_id,json=flightId,proto3,oneof" json:"flight_id,omitempty"`
	Lat       *float32         `protobuf:"fixed32,2,opt,name=lat,proto3,oneof" json:"lat,omitempty"`
	Lon       *float32         `protobuf:"fixed32,3,opt,name=lon,proto3,oneof" json:"lon,omitempty"`
	Track     *int32           `protobuf:"varint,4,opt,name=track,proto3,oneof" json:"track,omitempty"`
	Alt       *int32           `protobuf:"varint,5,opt,name=alt,proto3,oneof" json:"alt,omitempty"`
	Speed     *int32           `protobuf:"varint,6,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	Icon      *Icon            `protobuf:"varint,7,opt,name=icon,proto3,enum=fr24.feed.api.v1.Icon,oneof" json:"icon,omitempty"`
	Status    *Status          `protobuf:"varint,8,opt,name=status,proto3,enum=fr24.feed.api.v1.Status,oneof" json:"status,omitempty"`
	Timestamp *uint64          `protobuf:"varint,9,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	OnGround  *bool            `protobuf:"varint,10,opt,name=on_ground,json=onGround,proto3,oneof" json:"on_ground,omitempty"`
	Callsign  *string          `protobuf:"bytes,11,opt,name=callsign,proto3,oneof" json:"callsign,omitempty"`
	Source    *DataSource      `protobuf:"varint,12,opt,name=source,proto3,enum=fr24.feed.api.v1.DataSource,oneof" json:"source,omitempty"`
	ExtraInfo *ExtraFlightInfo `protobuf:"bytes,13,opt,name=extra_info,json=extraInfo,proto3,oneof" json:"extra_info,omitempty"`
}

func (x *Flight) Reset() {
	*x = Flight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flight) ProtoMessage() {}

func (x *Flight) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flight.ProtoReflect.Descriptor instead.
func (*Flight) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{27}
}

func (x *Flight) GetFlightId() uint32 {
	if x != nil && x.FlightId != nil {
		return *x.FlightId
	}
	return 0
}

func (x *Flight) GetLat() float32 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *Flight) GetLon() float32 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *Flight) GetTrack() int32 {
	if x != nil && x.Track != nil {
		return *x.Track
	}
	return 0
}

func (x *Flight) GetAlt() int32 {
	if x != nil && x.Alt != nil {
		return *x.Alt
	}
	return 0
}

func (x *Flight) GetSpeed() int32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Flight) GetIcon() Icon {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return Icon_B738
}

func (x *Flight) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_NORMAL
}

func (x *Flight) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Flight) GetOnGround() bool {
	if x != nil && x.OnGround != nil {
		return *x.OnGround
	}
	return false
}

func (x *Flight) GetCallsign() string {
	if x != nil && x.Callsign != nil {
		return *x.Callsign
	}
	return ""
}

func (x *Flight) GetSource() DataSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return DataSource_ADSB
}

func (x *Flight) GetExtraInfo() *ExtraFlightInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type FollowFlightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightId *uint32 `protobuf:"fixed32,1,opt,name=flight_id,json=flightId,proto3,oneof" json:"flight_id,omitempty"`
}

func (x *FollowFlightRequest) Reset() {
	*x = FollowFlightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowFlightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowFlightRequest) ProtoMessage() {}

func (x *FollowFlightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowFlightRequest.ProtoReflect.Descriptor instead.
func (*FollowFlightRequest) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{28}
}

func (x *FollowFlightRequest) GetFlightId() uint32 {
	if x != nil && x.FlightId != nil {
		return *x.FlightId
	}
	return 0
}

type FlightProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraversedDistance   *uint32 `protobuf:"varint,1,opt,name=traversed_distance,json=traversedDistance,proto3,oneof" json:"traversed_distance,omitempty"`         // in meters
	RemainingDistance   *uint32 `protobuf:"varint,2,opt,name=remaining_distance,json=remainingDistance,proto3,oneof" json:"remaining_distance,omitempty"`         // in meters
	ElapsedTime         *uint32 `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime,proto3,oneof" json:"elapsed_time,omitempty"`                           // in seconds
	RemainingTime       *uint32 `protobuf:"varint,4,opt,name=remaining_time,json=remainingTime,proto3,oneof" json:"remaining_time,omitempty"`                     // in seconds
	GreatCircleDistance *uint32 `protobuf:"varint,5,opt,name=great_circle_distance,json=greatCircleDistance,proto3,oneof" json:"great_circle_distance,omitempty"` // in meters
}

func (x *FlightProgress) Reset() {
	*x = FlightProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlightProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlightProgress) ProtoMessage() {}

func (x *FlightProgress) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlightProgress.ProtoReflect.Descriptor instead.
func (*FlightProgress) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{29}
}

func (x *FlightProgress) GetTraversedDistance() uint32 {
	if x != nil && x.TraversedDistance != nil {
		return *x.TraversedDistance
	}
	return 0
}

func (x *FlightProgress) GetRemainingDistance() uint32 {
	if x != nil && x.RemainingDistance != nil {
		return *x.RemainingDistance
	}
	return 0
}

func (x *FlightProgress) GetElapsedTime() uint32 {
	if x != nil && x.ElapsedTime != nil {
		return *x.ElapsedTime
	}
	return 0
}

func (x *FlightProgress) GetRemainingTime() uint32 {
	if x != nil && x.RemainingTime != nil {
		return *x.RemainingTime
	}
	return 0
}

func (x *FlightProgress) GetGreatCircleDistance() uint32 {
	if x != nil && x.GreatCircleDistance != nil {
		return *x.GreatCircleDistance
	}
	return 0
}

type FollowFlightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flight         *Flight         `protobuf:"bytes,1,opt,name=flight,proto3,oneof" json:"flight,omitempty"`
	Schedule       *ScheduledInfo  `protobuf:"bytes,2,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	Route          *RouteInfo      `protobuf:"bytes,3,opt,name=route,proto3,oneof" json:"route,omitempty"`
	Progress       *FlightProgress `protobuf:"bytes,4,opt,name=progress,proto3,oneof" json:"progress,omitempty"`
	MeanFlightTime *uint32         `protobuf:"varint,5,opt,name=mean_flight_time,json=meanFlightTime,proto3,oneof" json:"mean_flight_time,omitempty"` // in seconds
	AircraftInfo   *AircraftInfo   `protobuf:"bytes,6,opt,name=aircraft_info,json=aircraftInfo,proto3,oneof" json:"aircraft_info,omitempty"`
	FlightTrail    []*TrailPoint   `protobuf:"bytes,10,rep,name=flight_trail,json=flightTrail,proto3" json:"flight_trail,omitempty"`
}

func (x *FollowFlightResponse) Reset() {
	*x = FollowFlightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowFlightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowFlightResponse) ProtoMessage() {}

func (x *FollowFlightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowFlightResponse.ProtoReflect.Descriptor instead.
func (*FollowFlightResponse) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{30}
}

func (x *FollowFlightResponse) GetFlight() *Flight {
	if x != nil {
		return x.Flight
	}
	return nil
}

func (x *FollowFlightResponse) GetSchedule() *ScheduledInfo {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *FollowFlightResponse) GetRoute() *RouteInfo {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *FollowFlightResponse) GetProgress() *FlightProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *FollowFlightResponse) GetMeanFlightTime() uint32 {
	if x != nil && x.MeanFlightTime != nil {
		return *x.MeanFlightTime
	}
	return 0
}

func (x *FollowFlightResponse) GetAircraftInfo() *AircraftInfo {
	if x != nil {
		return x.AircraftInfo
	}
	return nil
}

func (x *FollowFlightResponse) GetFlightTrail() []*TrailPoint {
	if x != nil {
		return x.FlightTrail
	}
	return nil
}

type LiveFlightStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat    *float32 `protobuf:"fixed32,1,opt,name=lat,proto3,oneof" json:"lat,omitempty"`
	Lon    *float32 `protobuf:"fixed32,2,opt,name=lon,proto3,oneof" json:"lon,omitempty"`
	Status *Status  `protobuf:"varint,3,opt,name=status,proto3,enum=fr24.feed.api.v1.Status,oneof" json:"status,omitempty"`
	Squawk *uint32  `protobuf:"varint,4,opt,name=squawk,proto3,oneof" json:"squawk,omitempty"`
}

func (x *LiveFlightStatusData) Reset() {
	*x = LiveFlightStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFlightStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFlightStatusData) ProtoMessage() {}

func (x *LiveFlightStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFlightStatusData.ProtoReflect.Descriptor instead.
func (*LiveFlightStatusData) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{31}
}

func (x *LiveFlightStatusData) GetLat() float32 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *LiveFlightStatusData) GetLon() float32 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *LiveFlightStatusData) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_NORMAL
}

func (x *LiveFlightStatusData) GetSquawk() uint32 {
	if x != nil && x.Squawk != nil {
		return *x.Squawk
	}
	return 0
}

type SourceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *DataSource `protobuf:"varint,1,opt,name=source,proto3,enum=fr24.feed.api.v1.DataSource,oneof" json:"source,omitempty"`
	Count  *uint32     `protobuf:"varint,2,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *SourceStats) Reset() {
	*x = SourceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceStats) ProtoMessage() {}

func (x *SourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceStats.ProtoReflect.Descriptor instead.
func (*SourceStats) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{32}
}

func (x *SourceStats) GetSource() DataSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return DataSource_ADSB
}

func (x *SourceStats) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total []*SourceStats `protobuf:"bytes,1,rep,name=total,proto3" json:"total,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{33}
}

func (x *Stats) GetTotal() []*SourceStats {
	if x != nil {
		return x.Total
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A uint32 `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B uint32 `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{34}
}

func (x *Ping) GetA() uint32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *Ping) GetB() uint32 {
	if x != nil {
		return x.B
	}
	return 0
}

type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C uint32 `protobuf:"varint,1,opt,name=c,proto3" json:"c,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{35}
}

func (x *Pong) GetC() uint32 {
	if x != nil {
		return x.C
	}
	return 0
}

type TrailPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotId *uint64  `protobuf:"varint,1,opt,name=snapshot_id,json=snapshotId,proto3,oneof" json:"snapshot_id,omitempty"`
	Lat        *float32 `protobuf:"fixed32,2,opt,name=lat,proto3,oneof" json:"lat,omitempty"`
	Lon        *float32 `protobuf:"fixed32,3,opt,name=lon,proto3,oneof" json:"lon,omitempty"`
	Altitude   *int32   `protobuf:"varint,4,opt,name=altitude,proto3,oneof" json:"altitude,omitempty"`
	Spd        *uint32  `protobuf:"varint,5,opt,name=spd,proto3,oneof" json:"spd,omitempty"`
	Heading    *uint32  `protobuf:"varint,6,opt,name=heading,proto3,oneof" json:"heading,omitempty"`
	Vspd       *uint32  `protobuf:"varint,7,opt,name=vspd,proto3,oneof" json:"vspd,omitempty"`
}

func (x *TrailPoint) Reset() {
	*x = TrailPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrailPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrailPoint) ProtoMessage() {}

func (x *TrailPoint) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrailPoint.ProtoReflect.Descriptor instead.
func (*TrailPoint) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{36}
}

func (x *TrailPoint) GetSnapshotId() uint64 {
	if x != nil && x.SnapshotId != nil {
		return *x.SnapshotId
	}
	return 0
}

func (x *TrailPoint) GetLat() float32 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *TrailPoint) GetLon() float32 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *TrailPoint) GetAltitude() int32 {
	if x != nil && x.Altitude != nil {
		return *x.Altitude
	}
	return 0
}

func (x *TrailPoint) GetSpd() uint32 {
	if x != nil && x.Spd != nil {
		return *x.Spd
	}
	return 0
}

func (x *TrailPoint) GetHeading() uint32 {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return 0
}

func (x *TrailPoint) GetVspd() uint32 {
	if x != nil && x.Vspd != nil {
		return *x.Vspd
	}
	return 0
}

type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32 `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{37}
}

func (x *Duration) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32 `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *Tick) Reset() {
	*x = Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_fr24_feed_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_internal_fr24_feed_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_internal_fr24_feed_proto_rawDescGZIP(), []int{38}
}

func (x *Tick) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

var File_internal_fr24_feed_proto protoreflect.FileDescriptor

var file_internal_fr24_feed_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x66, 0x72, 0x32, 0x34, 0x2f,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89,
	0x05, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x01, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x61,
	0x78, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x06, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x07, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d,
	0x61, 0x78, 0x61, 0x67, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x12, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x72,
	0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x6c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x68, 0x66, 0x72, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x68, 0x66, 0x72, 0x65, 0x71, 0x88, 0x01,
	0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x68, 0x66, 0x72, 0x65, 0x71, 0x22, 0x39, 0x0a, 0x18,
	0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x09, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x62, 0x0a, 0x0c, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x0b,
	0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22,
	0xb1, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x72,
	0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x7e, 0x0a, 0x0c, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xc7, 0x03, 0x0a, 0x10, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x63, 0x68, 0x64, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x61, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x06, 0x61, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07,
	0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0a, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x63, 0x68, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x63,
	0x68, 0x64, 0x5f, 0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x61,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x18,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78,
	0x22, 0xab, 0x01, 0x0a, 0x0d, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x69, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x78,
	0x0a, 0x0d, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x69, 0x63, 0x61, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x61, 0x6f, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x05, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66,
	0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x61, 0x69, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x67, 0x73, 0x12, 0x3b,
	0x0a, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x61, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x52, 0x0f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x73, 0x12, 0x39, 0x0a,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x69, 0x72, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x69, 0x72,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x77, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x65, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x65, 0x61, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x69, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x22, 0xe4, 0x03,
	0x0a, 0x0f, 0x45, 0x6d, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x15, 0x0a, 0x03, 0x71, 0x6e, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x03, 0x71, 0x6e, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x6d, 0x63, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04, 0x61, 0x6d, 0x63, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x66, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x04, 0x61, 0x66, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x03, 0x6f, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x03, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x03, 0x74, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x04, 0x6d, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x67, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x04, 0x61, 0x67, 0x70, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x08, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x07, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52,
	0x02, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x71, 0x6e, 0x68, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x61, 0x6d, 0x63, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x66, 0x6d, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x61, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x63,
	0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x67, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x64, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x72, 0x73, 0x22, 0xff, 0x03, 0x0a, 0x07, 0x45, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x0a, 0x03, 0x71, 0x6e, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x03, 0x71, 0x6e, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x6d, 0x63, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x61, 0x6d, 0x63, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x61, 0x66, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x04, 0x61, 0x66, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x03, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x74, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x04,
	0x6d, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x67, 0x70, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x04, 0x61, 0x67, 0x70, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0a, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0b, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x02, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66,
	0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x0c, 0x52, 0x02, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x71, 0x6e, 0x68,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x6d, 0x63, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x66,
	0x6d, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69,
	0x61, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x67, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x64, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x72, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x74, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x74,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x65, 0x74, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x74, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x03, 0x61, 0x74, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03, 0x73, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x03,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x74, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x74, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x61, 0x74, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x74, 0x61, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x65, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x74, 0x61, 0x22, 0xc8, 0x03,
	0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x34, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x02, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x61, 0x72, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61,
	0x72, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x07, 0x61, 0x72, 0x72, 0x47, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62,
	0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0b, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x65, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61,
	0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72,
	0x72, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x72, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x67, 0x67,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0c,
	0x64, 0x69, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x0c, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x03, 0x6d, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x73, 0x6e, 0x22, 0x9e, 0x08, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x72, 0x65, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x02, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06,
	0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x76, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x4f, 0x66, 0x52, 0x65, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x72, 0x32,
	0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x08, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x0b, 0x52, 0x07, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x10, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x73,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x0c, 0x52, 0x0f,
	0x65, 0x6d, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x63, 0x61, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0b, 0x69, 0x63, 0x61, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0f, 0x52, 0x12, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x76,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x12, 0x76, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x15, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x11, 0x52, 0x14, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65, 0x67, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x76, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x67, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x73,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x63, 0x61, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x76, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x86, 0x05, 0x0a, 0x06, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6c, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x03, 0x61,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x07, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09,
	0x52, 0x08, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x0b, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x6e, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6c, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x22, 0x45, 0x0a, 0x13, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x0e, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x67, 0x72, 0x65, 0x61, 0x74,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x13, 0x67, 0x72, 0x65, 0x61, 0x74, 0x43,
	0x69, 0x72, 0x63, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x67, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x9a, 0x04, 0x0a,
	0x14, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x02, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x03, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x65, 0x61,
	0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x05, 0x52, 0x0c, 0x61, 0x69, 0x72, 0x63, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x69, 0x72, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x76, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6c, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x22, 0x78, 0x0a, 0x0b, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x22, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x01, 0x62, 0x22, 0x14, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x0c,
	0x0a, 0x01, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x63, 0x22, 0x9a, 0x02, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x73, 0x70, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52,
	0x03, 0x73, 0x70, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x73, 0x70, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x04, 0x76, 0x73, 0x70, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x6e, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x73, 0x70, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x73, 0x70, 0x64, 0x22, 0x2f, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x69,
	0x63, 0x6b, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x52, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4c, 0x4c,
	0x59, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f,
	0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x49, 0x52, 0x42, 0x4f, 0x52, 0x4e,
	0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10,
	0x03, 0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x53, 0x42, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4c,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x41, 0x41, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x53, 0x54, 0x49,
	0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x54, 0x45, 0x4c,
	0x4c, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x41, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x49, 0x44, 0x45, 0x52,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55, 0x53, 0x10,
	0x09, 0x2a, 0xe6, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x41, 0x52, 0x47, 0x4f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x4c, 0x49, 0x54,
	0x41, 0x52, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x4a, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x41, 0x56, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x45, 0x4c, 0x49, 0x43, 0x4f, 0x50, 0x54, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x41,
	0x49, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4c, 0x49, 0x44, 0x45, 0x52, 0x53, 0x10,
	0x07, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52, 0x4f, 0x4e, 0x45, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x53,
	0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0b, 0x2a, 0x38, 0x0a, 0x11, 0x41, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x11, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x49,
	0x4e, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x2a, 0xc2, 0x01, 0x0a, 0x0f, 0x45,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x45, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x46, 0x45, 0x47,
	0x55, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4e, 0x49,
	0x4d, 0x55, 0x4d, 0x5f, 0x46, 0x55, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4c, 0x41, 0x57, 0x46, 0x55, 0x4c, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x49, 0x52, 0x43, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x07, 0x2a,
	0xb3, 0x02, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x37, 0x33, 0x38,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x47, 0x54, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x53, 0x57, 0x32, 0x30, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x32, 0x30, 0x36, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x33, 0x30, 0x33, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x4a, 0x36, 0x30, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x33, 0x30, 0x30, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x37, 0x33, 0x36, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6f, 0x6b,
	0x6b, 0x65, 0x72, 0x31, 0x30, 0x30, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4a, 0x38, 0x35,
	0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x33, 0x32, 0x30, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x37, 0x35, 0x37, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x37, 0x36, 0x37, 0x10, 0x0c,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x33, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x44,
	0x31, 0x31, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x33, 0x33, 0x30, 0x10, 0x0f, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x33, 0x34, 0x33, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x33, 0x34, 0x36,
	0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x37, 0x37, 0x37, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04,
	0x42, 0x37, 0x34, 0x37, 0x10, 0x13, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x33, 0x38, 0x30, 0x10, 0x14,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x32, 0x32, 0x35, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x49,
	0x32, 0x10, 0x16, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x43, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x41, 0x4c, 0x4c, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x4e, 0x44, 0x10, 0x19, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x4c, 0x45, 0x49, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x52, 0x4f,
	0x4e, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x54, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x53, 0x53, 0x10, 0x1d, 0x2a, 0x50, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x04, 0x32, 0xd6, 0x05, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x16, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x1a, 0x16, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x53, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x66, 0x72,
	0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x21, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0e, 0x4e, 0x65, 0x61,
	0x72, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x66, 0x72,
	0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6e, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6b, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x0c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x31, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c,
	0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x73, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x66, 0x72, 0x32, 0x34,
	0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_fr24_feed_proto_rawDescOnce sync.Once
	file_internal_fr24_feed_proto_rawDescData = file_internal_fr24_feed_proto_rawDesc
)

func file_internal_fr24_feed_proto_rawDescGZIP() []byte {
	file_internal_fr24_feed_proto_rawDescOnce.Do(func() {
		file_internal_fr24_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_fr24_feed_proto_rawDescData)
	})
	return file_internal_fr24_feed_proto_rawDescData
}

var file_internal_fr24_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_internal_fr24_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_internal_fr24_feed_proto_goTypes = []interface{}{
	(RestrictionVisibility)(0),        // 0: fr24.feed.api.v1.RestrictionVisibility
	(TrafficType)(0),                  // 1: fr24.feed.api.v1.TrafficType
	(DataSource)(0),                   // 2: fr24.feed.api.v1.DataSource
	(Service)(0),                      // 3: fr24.feed.api.v1.Service
	(AirportFilterType)(0),            // 4: fr24.feed.api.v1.AirportFilterType
	(AirlineFilterType)(0),            // 5: fr24.feed.api.v1.AirlineFilterType
	(EmergencyStatus)(0),              // 6: fr24.feed.api.v1.EmergencyStatus
	(Icon)(0),                         // 7: fr24.feed.api.v1.Icon
	(Status)(0),                       // 8: fr24.feed.api.v1.Status
	(*LiveFeedRequest)(nil),           // 9: fr24.feed.api.v1.LiveFeedRequest
	(*VisibilitySettings)(nil),        // 10: fr24.feed.api.v1.VisibilitySettings
	(*PlaybackRequest)(nil),           // 11: fr24.feed.api.v1.PlaybackRequest
	(*LiveFlightsStatusRequest)(nil),  // 12: fr24.feed.api.v1.LiveFlightsStatusRequest
	(*LiveFeedResponse)(nil),          // 13: fr24.feed.api.v1.LiveFeedResponse
	(*PlaybackResponse)(nil),          // 14: fr24.feed.api.v1.PlaybackResponse
	(*LiveFlightsStatusResponse)(nil), // 15: fr24.feed.api.v1.LiveFlightsStatusResponse
	(*Geolocation)(nil),               // 16: fr24.feed.api.v1.Geolocation
	(*NearestFlightsRequest)(nil),     // 17: fr24.feed.api.v1.NearestFlightsRequest
	(*NearbyFlight)(nil),              // 18: fr24.feed.api.v1.NearbyFlight
	(*NearestFlightsResponse)(nil),    // 19: fr24.feed.api.v1.NearestFlightsResponse
	(*FetchSearchIndexRequest)(nil),   // 20: fr24.feed.api.v1.FetchSearchIndexRequest
	(*FlightSearchData)(nil),          // 21: fr24.feed.api.v1.FlightSearchData
	(*FetchSearchIndexResponse)(nil),  // 22: fr24.feed.api.v1.FetchSearchIndexResponse
	(*Interval)(nil),                  // 23: fr24.feed.api.v1.Interval
	(*AirportFilter)(nil),             // 24: fr24.feed.api.v1.AirportFilter
	(*AirlineFilter)(nil),             // 25: fr24.feed.api.v1.AirlineFilter
	(*Filter)(nil),                    // 26: fr24.feed.api.v1.Filter
	(*LocationBoundaries)(nil),        // 27: fr24.feed.api.v1.LocationBoundaries
	(*Route)(nil),                     // 28: fr24.feed.api.v1.Route
	(*EmsAvailability)(nil),           // 29: fr24.feed.api.v1.EmsAvailability
	(*EmsInfo)(nil),                   // 30: fr24.feed.api.v1.EmsInfo
	(*Schedule)(nil),                  // 31: fr24.feed.api.v1.Schedule
	(*ScheduledInfo)(nil),             // 32: fr24.feed.api.v1.ScheduledInfo
	(*RouteInfo)(nil),                 // 33: fr24.feed.api.v1.RouteInfo
	(*AircraftInfo)(nil),              // 34: fr24.feed.api.v1.AircraftInfo
	(*ExtraFlightInfo)(nil),           // 35: fr24.feed.api.v1.ExtraFlightInfo
	(*Flight)(nil),                    // 36: fr24.feed.api.v1.Flight
	(*FollowFlightRequest)(nil),       // 37: fr24.feed.api.v1.FollowFlightRequest
	(*FlightProgress)(nil),            // 38: fr24.feed.api.v1.FlightProgress
	(*FollowFlightResponse)(nil),      // 39: fr24.feed.api.v1.FollowFlightResponse
	(*LiveFlightStatusData)(nil),      // 40: fr24.feed.api.v1.LiveFlightStatusData
	(*SourceStats)(nil),               // 41: fr24.feed.api.v1.SourceStats
	(*Stats)(nil),                     // 42: fr24.feed.api.v1.Stats
	(*Ping)(nil),                      // 43: fr24.feed.api.v1.Ping
	(*Pong)(nil),                      // 44: fr24.feed.api.v1.Pong
	(*TrailPoint)(nil),                // 45: fr24.feed.api.v1.TrailPoint
	(*Duration)(nil),                  // 46: fr24.feed.api.v1.Duration
	(*Tick)(nil),                      // 47: fr24.feed.api.v1.Tick
	nil,                               // 48: fr24.feed.api.v1.LiveFlightsStatusResponse.FlightsEntry
	(*fieldmaskpb.FieldMask)(nil),     // 49: google.protobuf.FieldMask
}
var file_internal_fr24_feed_proto_depIdxs = []int32{
	27, // 0: fr24.feed.api.v1.LiveFeedRequest.bounds:type_name -> fr24.feed.api.v1.LocationBoundaries
	10, // 1: fr24.feed.api.v1.LiveFeedRequest.settings:type_name -> fr24.feed.api.v1.VisibilitySettings
	26, // 2: fr24.feed.api.v1.LiveFeedRequest.filters:type_name -> fr24.feed.api.v1.Filter
	0,  // 3: fr24.feed.api.v1.LiveFeedRequest.restriction_mode:type_name -> fr24.feed.api.v1.RestrictionVisibility
	49, // 4: fr24.feed.api.v1.LiveFeedRequest.field_mask:type_name -> google.protobuf.FieldMask
	2,  // 5: fr24.feed.api.v1.VisibilitySettings.sources:type_name -> fr24.feed.api.v1.DataSource
	3,  // 6: fr24.feed.api.v1.VisibilitySettings.services:type_name -> fr24.feed.api.v1.Service
	1,  // 7: fr24.feed.api.v1.VisibilitySettings.traffic_type:type_name -> fr24.feed.api.v1.TrafficType
	9,  // 8: fr24.feed.api.v1.PlaybackRequest.live_feed_request:type_name -> fr24.feed.api.v1.LiveFeedRequest
	36, // 9: fr24.feed.api.v1.LiveFeedResponse.flights:type_name -> fr24.feed.api.v1.Flight
	42, // 10: fr24.feed.api.v1.LiveFeedResponse.stats:type_name -> fr24.feed.api.v1.Stats
	36, // 11: fr24.feed.api.v1.LiveFeedResponse.selected_flights:type_name -> fr24.feed.api.v1.Flight
	13, // 12: fr24.feed.api.v1.PlaybackResponse.live_feed_response:type_name -> fr24.feed.api.v1.LiveFeedResponse
	48, // 13: fr24.feed.api.v1.LiveFlightsStatusResponse.flights:type_name -> fr24.feed.api.v1.LiveFlightsStatusResponse.FlightsEntry
	16, // 14: fr24.feed.api.v1.NearestFlightsRequest.location:type_name -> fr24.feed.api.v1.Geolocation
	36, // 15: fr24.feed.api.v1.NearbyFlight.flight:type_name -> fr24.feed.api.v1.Flight
	18, // 16: fr24.feed.api.v1.NearestFlightsResponse.flights:type_name -> fr24.feed.api.v1.NearbyFlight
	21, // 17: fr24.feed.api.v1.FetchSearchIndexResponse.flights:type_name -> fr24.feed.api.v1.FlightSearchData
	4,  // 18: fr24.feed.api.v1.AirportFilter.type:type_name -> fr24.feed.api.v1.AirportFilterType
	5,  // 19: fr24.feed.api.v1.AirlineFilter.type:type_name -> fr24.feed.api.v1.AirlineFilterType
	23, // 20: fr24.feed.api.v1.Filter.altitude_ranges:type_name -> fr24.feed.api.v1.Interval
	23, // 21: fr24.feed.api.v1.Filter.speed_ranges:type_name -> fr24.feed.api.v1.Interval
	25, // 22: fr24.feed.api.v1.Filter.airlines:type_name -> fr24.feed.api.v1.AirlineFilter
	24, // 23: fr24.feed.api.v1.Filter.airports:type_name -> fr24.feed.api.v1.AirportFilter
	23, // 24: fr24.feed.api.v1.Filter.birth_year_ranges:type_name -> fr24.feed.api.v1.Interval
	24, // 25: fr24.feed.api.v1.Filter.origins:type_name -> fr24.feed.api.v1.AirportFilter
	24, // 26: fr24.feed.api.v1.Filter.destinations:type_name -> fr24.feed.api.v1.AirportFilter
	3,  // 27: fr24.feed.api.v1.Filter.categories:type_name -> fr24.feed.api.v1.Service
	6,  // 28: fr24.feed.api.v1.EmsInfo.rs:type_name -> fr24.feed.api.v1.EmergencyStatus
	28, // 29: fr24.feed.api.v1.ExtraFlightInfo.route:type_name -> fr24.feed.api.v1.Route
	31, // 30: fr24.feed.api.v1.ExtraFlightInfo.schedule:type_name -> fr24.feed.api.v1.Schedule
	30, // 31: fr24.feed.api.v1.ExtraFlightInfo.ems_info:type_name -> fr24.feed.api.v1.EmsInfo
	29, // 32: fr24.feed.api.v1.ExtraFlightInfo.ems_availability:type_name -> fr24.feed.api.v1.EmsAvailability
	7,  // 33: fr24.feed.api.v1.Flight.icon:type_name -> fr24.feed.api.v1.Icon
	8,  // 34: fr24.feed.api.v1.Flight.status:type_name -> fr24.feed.api.v1.Status
	2,  // 35: fr24.feed.api.v1.Flight.source:type_name -> fr24.feed.api.v1.DataSource
	35, // 36: fr24.feed.api.v1.Flight.extra_info:type_name -> fr24.feed.api.v1.ExtraFlightInfo
	36, // 37: fr24.feed.api.v1.FollowFlightResponse.flight:type_name -> fr24.feed.api.v1.Flight
	32, // 38: fr24.feed.api.v1.FollowFlightResponse.schedule:type_name -> fr24.feed.api.v1.ScheduledInfo
	33, // 39: fr24.feed.api.v1.FollowFlightResponse.route:type_name -> fr24.feed.api.v1.RouteInfo
	38, // 40: fr24.feed.api.v1.FollowFlightResponse.progress:type_name -> fr24.feed.api.v1.FlightProgress
	34, // 41: fr24.feed.api.v1.FollowFlightResponse.aircraft_info:type_name -> fr24.feed.api.v1.AircraftInfo
	45, // 42: fr24.feed.api.v1.FollowFlightResponse.flight_trail:type_name -> fr24.feed.api.v1.TrailPoint
	8,  // 43: fr24.feed.api.v1.LiveFlightStatusData.status:type_name -> fr24.feed.api.v1.Status
	2,  // 44: fr24.feed.api.v1.SourceStats.source:type_name -> fr24.feed.api.v1.DataSource
	41, // 45: fr24.feed.api.v1.Stats.total:type_name -> fr24.feed.api.v1.SourceStats
	40, // 46: fr24.feed.api.v1.LiveFlightsStatusResponse.FlightsEntry.value:type_name -> fr24.feed.api.v1.LiveFlightStatusData
	43, // 47: fr24.feed.api.v1.Feed.Echo:input_type -> fr24.feed.api.v1.Ping
	46, // 48: fr24.feed.api.v1.Feed.CountDown:input_type -> fr24.feed.api.v1.Duration
	9,  // 49: fr24.feed.api.v1.Feed.LiveFeed:input_type -> fr24.feed.api.v1.LiveFeedRequest
	11, // 50: fr24.feed.api.v1.Feed.Playback:input_type -> fr24.feed.api.v1.PlaybackRequest
	17, // 51: fr24.feed.api.v1.Feed.NearestFlights:input_type -> fr24.feed.api.v1.NearestFlightsRequest
	12, // 52: fr24.feed.api.v1.Feed.LiveFlightsStatus:input_type -> fr24.feed.api.v1.LiveFlightsStatusRequest
	20, // 53: fr24.feed.api.v1.Feed.FetchSearchIndex:input_type -> fr24.feed.api.v1.FetchSearchIndexRequest
	37, // 54: fr24.feed.api.v1.Feed.FollowFlight:input_type -> fr24.feed.api.v1.FollowFlightRequest
	44, // 55: fr24.feed.api.v1.Feed.Echo:output_type -> fr24.feed.api.v1.Pong
	47, // 56: fr24.feed.api.v1.Feed.CountDown:output_type -> fr24.feed.api.v1.Tick
	13, // 57: fr24.feed.api.v1.Feed.LiveFeed:output_type -> fr24.feed.api.v1.LiveFeedResponse
	14, // 58: fr24.feed.api.v1.Feed.Playback:output_type -> fr24.feed.api.v1.PlaybackResponse
	19, // 59: fr24.feed.api.v1.Feed.NearestFlights:output_type -> fr24.feed.api.v1.NearestFlightsResponse
	15, // 60: fr24.feed.api.v1.Feed.LiveFlightsStatus:output_type -> fr24.feed.api.v1.LiveFlightsStatusResponse
	22, // 61: fr24.feed.api.v1.Feed.FetchSearchIndex:output_type -> fr24.feed.api.v1.FetchSearchIndexResponse
	39, // 62: fr24.feed.api.v1.Feed.FollowFlight:output_type -> fr24.feed.api.v1.FollowFlightResponse
	55, // [55:63] is the sub-list for method output_type
	47, // [47:55] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_internal_fr24_feed_proto_init() }
func file_internal_fr24_feed_proto_init() {
	if File_internal_fr24_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_fr24_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisibilitySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaybackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFlightsStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaybackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFlightsStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Geolocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestFlightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearbyFlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearestFlightsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSearchIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightSearchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchSearchIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirlineFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationBoundaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmsAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AircraftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraFlightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowFlightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlightProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowFlightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFlightStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrailPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_fr24_feed_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_fr24_feed_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_internal_fr24_feed_proto_msgTypes[38].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_fr24_feed_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_fr24_feed_proto_goTypes,
		DependencyIndexes: file_internal_fr24_feed_proto_depIdxs,
		EnumInfos:         file_internal_fr24_feed_proto_enumTypes,
		MessageInfos:      file_internal_fr24_feed_proto_msgTypes,
	}.Build()
	File_internal_fr24_feed_proto = out.File
	file_internal_fr24_feed_proto_rawDesc = nil
	file_internal_fr24_feed_proto_goTypes = nil
	file_internal_fr24_feed_proto_depIdxs = nil
}
